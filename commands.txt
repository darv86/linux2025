// by default operator > works with STDOUT stream,
// but it can be specified manually,
// by adding 1 before operator >
ls -al 1> stdout-file

// 2 before operator > will set stream to STDERR
ls -al 2> stderr-file

// will create a new file,
// if exist, override;
// alternative to the command (touch new-file.ext)
> new-file.ext

// output the first part of a file,
// by default: 10 lines
head ./my-file.txt

// output the last part of a file,
// by default: 10 lines
tail ./my-file.txt
// flag -f doesn't close a file and watch for a new lines
tail -f ./my-file.txt

// grep (global regex print)
// output all lines which match myRegEx
grep myRegEx ./my-file.txt

// 3 files store info about linux users
// (to create backup of all users, need to copy these files):
// all users
/etc/passwd
// all groups
/etc/group
// all users passwords
/etc/shadow

// change permissions
chmod 755 ./file.txt
// is equal to:
chmod u=rwx,g=rx,o=rx ./file.txt
// or:
chmod u+rwx,g+rx,o+rx ./file.txt

// u - user
// g - group
// o - other (not owner and users are not in the group)
// a - all (owner and all users)

// to strip some permissions
chmod o-wx ./file.txt
// is equal to:
chmod 754 ./file.txt

// r (read) = 4 (binary: 100)
// w (write) = 2 (binary: 010)
// x (execute) = 1 (binary: 001)
// "x" gives access to enter a directory

// statistic for a file or directory
stat /path/to/file.txt

// to create new group
sudo groupadd groupName

// to add user to a group;
// flag 'a' appends user to a group
// can't be used as a stand along flag,
// must be combined with another (e.g. with flag 'G');
// flag 'G' adds user to a group,
// but without flag 'a', removes from others groups
sudo usermod -aG groupName userName

// there is a file, where all groups and users migrations can be set up
/etc/sudoers

// when run a command/app (e.g. pwd -> /bin/pwd),
// bash looks for all paths from left to right,
// where this command can be;
// will execute the first found app;
// all these paths are inside the env variable $PATH

// when bash has found a command, bash will hash the path of this command
// and is going to use it while session;
// so if while session this path changes,
// bash will not go through all paths ($PATH) again;
// thats why hash needs to be cleaned:
hash -r
// show hash table:
hash

// will show type of a command or path to it, if not built-in:
// will shot the path
type chmod
// will show the built-in type
type cd

// task (command) scheduler -
// global file /etc/crontab
// local file (sudo) /var/spoon/cron/crontabs/username
// command to edit local crontab file via terminal and without sudo:
crontab -e

// tr (translate/transform) can change one string to another;
// will change all spaces to 0:
tail -n 2 commands.txt | tr [:space:] 0
// or can delete substring (e.g. //) from string:
tail -n 2 commands.txt | tr -d //

// sed another command for text filtering and transformation
tail -n 2 commands.txt | sed 's/\/\///g'
// or the same, but using another delimiter (/ -> |),
// is this case, less confusion and no need to use escape symbol (\):
tail -n 2 commands.txt | sed 's|//||g'

// to search inside apt by a keyword:
apt search chrome
// to show package download source:
apt policy chrome

// creates temp file (in ram, not disk) in read-only mode,
// with an output of a command:
vim <(apt search chrome)

// debian based distro install:
// 1. use gparted (partition editor app, preinstalled while os installation wizard)
//    to format EFI partition (fat32) and os partition (ext4)
// 2. to check disk where is windows EFI partition path, use sudo fdisk -l
// 3. before installation, should use command "parted" in terminal,
//    to turn off flag "boo" from windows EFI partition:
//    "parted /dev/nvme0n1"
//    then "p" to print list of all partitions and check id for windows EFI partition
//    then turn off "boot" flag:
//    "set 1 boot off"
// 4. make distro install
// 5. need to turn "boot" flag on:
//    "set 1 boot on"
// 6. to configure grub menu:
//    "sudo grub-update"
// 7. add string "GRUB_DISABLE_OSP_PROBER=off" to grub config "sudo vim /etc/default/grub"
// 8. to update new grub settings:
//    "sudo grub-update"
